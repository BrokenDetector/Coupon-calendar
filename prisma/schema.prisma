generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  email                     String      @unique
  password                  String?
  image                     String?
  emailVerified             Boolean?     @default(false)
  verificationToken         String?
  verificationTokenExpires  DateTime?
  resetPasswordToken        String?
  resetPasswordTokenExpires DateTime?
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  portfolios                Portfolio[]
  accounts                  Account[]
  sessions                  Session[]

  @@map("users")
}

model Portfolio {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bonds     Bond[]

  @@map("portfolios")
}

model Bond {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  SECID         String
  quantity      Int
  purchasePrice Float?
  portfolioId   String    @db.ObjectId
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([SECID, portfolioId])
  @@map("bonds")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
